# Good coding practices {.unnumbered}

Effective code management is vital in research, especially for data analysis and simulations. We follow a simple workflow for developing Python code, using Conda to manage your environment and Ruff for code formatting.

### Setting Up Your Development Environment

* **Install Conda**:
   - **What to Do**: Download and install Miniconda or Anaconda from their websites. Miniconda is a lighter version with fewer pre-installed tools, while Anaconda comes with many tools already setup.
   - **Why**: Conda helps you create and manage isolated coding environments, ensuring that each project has the specific tools and libraries it needs.

* **Create and Manage Your Environment**:
   - **Create a New Environment**: Open Conda and set up a new environment for your project. Choose a name for your environment and select the Python version you want to use.
   - **Activate the Environment**: Switch to the new environment so you can install and work with the packages specific to your project.
   - **Install Packages**: Within this environment, install the necessary Python libraries for your project, such as NumPy, Pandas, and Scikit-Learn.
   - **Install Ruff**: Add Ruff to your environment for code formatting. This tool helps ensure your code follows consistent style rules and is easy to read.
   - **Save and Recreate Your Environment**: Save the configuration of your environment so it can be recreated later or shared with others. You can use this saved configuration to set up the same environment on another machine.

### Writing and Organizing Code

* **Organize Your Project**:
   - **Folders**: Create a folder structure for your project. Use `data/` for storing datasets, `notebooks/` for Jupyter Notebooks, `src/` for your main code files, `tests/` for code tests, and `scripts/` for commonly used tools or scripts.
   - **Why**: Organizing your project this way helps keep your work tidy and makes it easier to locate files and understand the project's structure.

* **Version Control and Documentation**:
   - **Version Control**: Use Git to track changes in your code. Set up a repository on GitHub or a similar platform to manage versions of your code and collaborate with others.
   - **Documentation**: Add comments to your code to explain what it does. Maintain a `README.md` file to provide an overview of your project, including how to install and use it.

* **Code Formatting**:
   - **Use Ruff**: Format your code with Ruff to ensure it adheres to style guidelines. This helps make your code cleaner and more consistent. Run Ruff to check and automatically fix style issues in your code.

* **Testing Your Code**:
   - **Write Tests**: Develop tests for your code to verify that it works as expected. Use testing tools to create and run these tests. Store the test files in the `tests/` folder.

### Managing Data

* **Organize and Track Data**:
   - **Store Data**: Keep raw data in `data/raw/` and processed data in `data/processed/`.
   - **Track Changes**: Use data management tools to keep track of different versions of your data, which helps in maintaining consistency and reproducibility.

* **Access and Share Data**:
   - **Control Access**: Set up permissions to control who can view or modify your data.
   - **Share Data**: Use platforms like Zenodo to share your datasets with others, ensuring they are properly cited.

### Ensuring Reproducibility

* **Recreate Your Environment**:
   - **What to Do**: Use the saved environment configuration to recreate the same coding environment on different machines. This ensures that others can work with the same setup as you.

* **Reproducible Code**:
   - **Ensure Execution**: Make sure your code can be run by others without issues. Keep Jupyter Notebooks updated to help others replicate your results easily.

### Collaborating with Others

* **Code Reviews and Communication**:
   - **Review Code**: Regularly review each otherâ€™s code and use tools like pull requests to integrate changes. This helps maintain code quality and facilitates knowledge sharing.
   - **Communicate**: Hold regular meetings to discuss progress, share updates, and document your findings collaboratively.

### Maintaining Your Project

* **Update and Track Issues**:
   - **Keep Updated**: Regularly update your tools and libraries to ensure everything is up-to-date.
   - **Manage Issues**: Use issue tracking tools to handle bugs and feature requests efficiently.

### Conclusion

By following these steps, you'll ensure that your coding practices are well-organized, reproducible, and collaborative. Using Conda for managing your environment and Ruff for formatting will enhance the efficiency and reliability of your work in our lab. More information on each of these practices are discussed in following sections.
