# Python resources {.unnumbered}

These are some of the resource to introduce you to basics Python. The resources contain videos, articles, books. Please feel free to come to iHuman lab and ask anyone at lab to get more information.

## General resources

### Python Tutor: Illuminating Your Path

Begin your journey with Python Tutor, a sophisticated platform where code transcends the screen. Visualize your code execution step-by-step, gaining invaluable insights into Python's mechanics. This interactive tool transforms abstract concepts into tangible understanding, making complex programming principles accessible and engaging.

Explore Python Tutor here: [Python Tutor](http://pythontutor.com){target="_blank_"}

**Guide**:

- Utilize Python Tutor to visualize code execution and understand variable interactions dynamically.
- Experiment with different code snippets to solidify your grasp on fundamental Python concepts.

### Conda: Crafting Your Coding Sanctuaries

Dive deeper into efficient project management with Conda, a versatile tool for creating and managing Python environments. Whether you're developing software or conducting research, Conda ensures seamless environment setup, eliminating dependency conflicts and promoting project reproducibility. Navigate Conda confidently to streamline your coding workflow and enhance collaboration.

Discover Conda's capabilities: [Why You Need Python Environments and How to Manage Them with Conda](https://www.freecodecamp.org/news/why-you-need-python-environments-and-how-to-manage-them-with-conda-85f155f4353c/){target='_blank_'}

**Guide**:

- Master the installation and utilization of Conda to create isolated Python environments tailored to your project requirements.
- Learn best practices for environment management to optimize development efficiency and maintain code integrity.

### Open Source: Joining Forces in the Code World

Engage with the dynamic world of open-source development through the Open Source Guide. Embrace collaboration and community-driven innovation as you navigate the principles of contributing effectively to open-source projects. From mastering version control with Git to exploring diverse projects aligned with your interests, empower yourself to make meaningful contributions and foster professional growth.

Join the open-source community here: [Open Source Guide](https://opensource.guide){target='_blank_'}

**Guide**:

- Familiarize yourself with the ethos and methodologies of open-source development outlined in the Open Source Guide.
- Enhance your proficiency in Git version control to efficiently manage code revisions and facilitate collaborative coding efforts.

### PyVideo: Learning from Experts

Immerse yourself in PyVideo's repository of educational content, where industry experts share profound insights and innovative practices in Python programming. From foundational concepts to advanced techniques and emerging trends, PyVideo enriches your learning journey with comprehensive tutorials and conference talks. Stay informed, inspired, and ahead in the ever-evolving Python ecosystem.

Explore PyVideo's resources here: [PyVideo](https://pyvideo.org){target='_blank_'}

**Guide**:

- Navigate PyVideo to access a wealth of video content covering diverse topics in Python programming.
- Take notes and integrate key learnings from expert presentations into your coding practices and project development.

### WTF Python: Unveiling Python's Intricacies

Delve into the intriguing intricacies of Python with WTF Pythonâ€”a curated collection of code snippets that unravel surprising behaviors and lesser-known features. Challenge yourself to decode these puzzling aspects of Python programming, gaining deeper insights into its flexibility and functionality. Discover the nuances that make Python a preferred language for diverse applications.

Unveil Python's mysteries here: [WTF Python](https://github.com/satwikkansal/wtfpython){target='_blank_'}

**Guide**:

- Engage with WTF Python to explore unconventional Python behaviors and expand your programming horizons.
- Experiment with provided code snippets to deepen your understanding of Python's unique capabilities and edge cases.

### Scientific Computing: Elevating Precision and Reproducibility

Elevate your scientific computing endeavors with "Good Enough Practices in Scientific Computing." This comprehensive guide equips you with essential methodologies for optimizing code performance, ensuring data integrity, and promoting reproducibility in research settings. Adopt best practices to enhance the efficiency and transparency of your scientific coding workflows.

Enhance your scientific practices here: [Good Enough Practices in Scientific Computing](https://swcarpentry.github.io/good-enough-practices-in-scientific-computing/){target='_blank_'}

**Guide**:

- Navigate the guide to implement foundational practices in scientific programming, including effective data management and workflow optimization.
- Incorporate version control strategies and virtual environments to maintain project integrity and facilitate collaboration in research environments.

### Visualizing NumPy: Mastering Data Manipulation

Capitalize on NumPy's prowess in numerical computing and data manipulation through interactive tutorials offered by Visualizing NumPy Operations. Enhance your proficiency in array operations, indexing techniques, and vectorized computations with visual demonstrations that illustrate complex concepts effectively. Strengthen your skills to tackle sophisticated data-centric challenges with confidence and precision.

Master NumPy's capabilities here: [Visualizing NumPy Operations](https://jalammar.github.io/visual-numpy/){target='_blank_'}

**Guide**:

- Explore interactive tutorials on Visualizing NumPy Operations to deepen your understanding of NumPy's capabilities and applications.
- Apply learned concepts to practical scenarios, refining your data manipulation skills and optimizing performance in computational tasks.

## Websites

Are you gearing up for job interviews or seeking internship opportunities in the realm of programming? Mastering Python can significantly enhance your skillset and boost your competitiveness in the job market. Here's a tailored selection of platforms designed to equip you with essential Python skills and prepare you effectively for technical assessments:

- [Edx](https://www.edx.org){target='_blank_'}
  If you are new to python programming, definitely take [Introduction to Computer Science and Programming Using Python](https://www.edx.org/course/6-00-1x-introduction-to-computer-science-and-programming-using-python-3) course. It is one of the best courses out there from which you can learn lot of fundamental python programming skills.

- [HackerRank](https://www.hackerrank.com/dashboard){target='_blank_'}
  HackerRank has lot of resources to learn many programming languages. Regestration is free.

- [LeetCode](https://leetcode.com){target='_blank_'}
  LeetCode is much intensive platform to learn coding. It can be used if you want to prepare for interviews.

## PyCon

PyCon is one of the best way to get in touch with great Python community. Lot of great talks and tutorials (highly recommended!).

```{=html}
<p align="center">
<iframe width="560" height="315" src="https://www.youtube.com/embed/OH3C5a2uAWA?si=x91CSAR0r88VNNBZ" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe></p>
```

## Pytorch

As a new student, [Pytroch](https://pytorch.org){target='_blank_'} will be an essential tool for your deep learning research due to its flexibility and extensive community support. To streamline your workflow and boost productivity, we've compiled a guide to key PyTorch libraries and tools that simplify model development, training, and evaluation.

A github repository with lot of resources: [The incredible Pytorch](https://github.com/ritchieng/the-incredible-pytorch){target='_blank_'}

### PyTorch Lightning

**GitHub Link**: [PyTorch Lightning](https://github.com/williamFalcon/pytorch-lightning){target='_blank_'}

PyTorch Lightning is our preferred framework for developing deep learning models in the lab. It automates the tedious aspects of deep learning research, such as setting up training loops, logging metrics, and handling distributed training across multiple GPUs or TPUs. By standardizing best practices and providing a clean interface, PyTorch Lightning enables rapid prototyping and seamless scaling of research projects.

**Key Features:**

- **Automated Training Loop**: Write minimal code to define your model, optimizer, and data loaders, and PyTorch Lightning takes care of the rest.
- **Reproducibility**: Ensures deterministic training behavior for reproducible research results.
- **Scalability**: Easily scale your models from single GPU to multi-GPU or even distributed training without changing your codebase.
- **Experiment Management**: Built-in support for logging, visualization, and tracking experiments, making it easier to monitor and compare model performance.

In our lab, we predominantly use PyTorch Lightning for its ability to accelerate the development cycle and ensure consistency across experiments. It encourages best practices in deep learning research and facilitates collaboration among team members.

### Other Pytorch Related Links

- <https://github.com/szymonmaszke/torchfunc>{target='_blank_'}
- <https://github.com/wkentaro/pytorch-for-numpy-users>{target='_blank_'}
- <https://github.com/suriyadeepan/torchtest>{target='_blank_'}

## Ray

Another python package we extensively use in our lab is [Ray](https://www.ray.io){target='_blank_'}. Ray a powerful parallel processing library designed to streamline distributed computing tasks in Python. Whether you're working with machine learning models, simulations, or data processing pipelines, Ray provides efficient tools for scaling your applications across multiple cores or clusters.

### Key Features of Ray

#### Task Parallelism with Remote Functions

Ray enables you to define functions (`@ray.remote`) that can execute asynchronously across multiple workers. These functions can leverage the computing resources efficiently, executing tasks concurrently without blocking the main thread.

#### Actor Model for Stateful Services

Ray's Actor model allows you to create and manage stateful objects that maintain their internal state across multiple function invocations. This is useful for building complex applications where maintaining state across distributed components is crucial.

#### Distributed Data Processing with Ray Libraries

Ray comes with additional libraries that extend its capabilities for distributed computing:

- **Ray Tune**: Scalable hyperparameter tuning. [Ray Tune Documentation](https://docs.ray.io/en/latest/tune/index.html){target='_blank_'}
- **Ray RLlib**: Scalable reinforcement learning. [Ray RLlib Documentation](https://docs.ray.io/en/latest/rllib/index.html){target='_blank_'}
- **Ray Serve**: Scalable and efficient serving of machine learning models. [Ray Serve Documentation](https://docs.ray.io/en/latest/serve/index.html){target='_blank_'}

### Resources and Documentation

Explore more about Ray's capabilities, including installation guides, tutorials, and API references, through its official documentation:

- [Ray GitHub Repository](https://github.com/ray-project/ray){target='_blank_'}
- [Ray Documentation](https://docs.ray.io/en/latest/index.html){target='_blank_'}
